type JsonValue {
	case Null {
		def toString() -> string {
			return "null";
		}
		def valueType() -> string {
			return "Null";
		}
	}
	case String(v: string) {
		def toString() -> string {
			return StringBuilder.new()
				.putc('\"')
				.puts(v)
				.putc('\"')
				.extract();
		}
		def valueType() -> string {
			return "String";
		}
	}
	case Number(v: string) {
		def toString() -> string {
			return v;
		}
		def valueType() -> string {
			return "Number";
		}
		def i32() -> Result<i32, string> {
			def parsed = Ints.parseDecimal(v, 0);
			if (parsed.0 > 0) {
				return Result.Ok(parsed.1);
			}
			return Result.Err("could not parse to int");
		}
		def i64() -> Result<i64, string> {
			def parsed = Longs.parseDecimal(v, 0);
			return Result.Ok(parsed);
		}
		def f32() -> Result<float, string> {
			def np = NumberParser.new(v, 0);
			if (np.parse()) {
				return Result.Ok(float.view(u32.view(Float64Val.!(np.val).bits)));
			}
			return Result.Err(np.error_msg);
		}
		def f64() -> Result<double, string> {
			def np = NumberParser.new(v, 0);
			if (np.parse()) {
				return Result.Ok(double.view(Float64Val.!(np.val).bits));
			}
			return Result.Err(np.error_msg);
		}
	}
	case Bool(v: bool) {
		def toString() -> string {
			if (v) {
				return "true";
			}
			return "false";
		}
		def valueType() -> string {
			return "Bool";
		}
	}
	case Array(array: Array<JsonValue>) {
		def toString() -> string {
			def buf = StringBuilder.new().putc('[');
			for (i < array.length) {
				buf.puts(array[i].toString());
				if (i != array.length - 1) {
					buf.putc(',');
				}
			}
			buf.putc(']');
			return buf.extract();
		}
		def valueType() -> string {
			return "Array";
		}
	}
	case Object(object: HashMap<string, JsonValue>) {
		def toString() -> string {
			def buf = StringBuilder.new().putc('{');
			def keys = Lists.toArray(Maps.keyList(object));
			for (i < keys.length) {
				def key = keys[i];
				def value = object[key];
				buf.putc('\"').puts(key).putc('\"');
				buf.putc(':');
				buf.puts(value.toString());
				if (i != keys.length - 1) {
					buf.putc(',');
				}
			}
			buf.putc('}');
			return buf.extract();
		}
		def valueType() -> string {
			return "Object";
		}
	}
	def toString() -> string {
		return this.toString();
	}
	def valueType() -> string {
		return this.valueType();
	}
}

type Result<T, E> {
	case Ok(value: T);
	case Err(error: E);
}

component Json {
	def deInt32(json: JsonValue) -> Result<i32, string> {
		match (json) {
			x: JsonValue.Number => return x.i32();
			_ => return Result.Err(Strings.format1("Expected to find Number, found %s", json.valueType()));
		}
	}
	def deInt64(json: JsonValue) -> Result<i64, string> {
		match (json) {
			x: JsonValue.Number => return x.i64();
			_ => return Result.Err(Strings.format1("Expected to find Number, found %s", json.valueType()));
		}
	}
	def deFloat32(json: JsonValue) -> Result<float, string> {
		match (json) {
			x: JsonValue.Number => return x.f32();
			_ => return Result.Err(Strings.format1("Expected to find Number, found %s", json.valueType()));
		}
	}
	def deFloat64(json: JsonValue) -> Result<double, string> {
		match (json) {
			x: JsonValue.Number => return x.f64();
			_ => return Result.Err(Strings.format1("Expected to find Number, found %s", json.valueType()));
		}
	}
	def deBool(json: JsonValue) -> Result<bool, string> {
		match (json) {
			Bool(v) => return Result.Ok(v);
			_ => return Result.Err(Strings.format1("Expected to find Bool, found %s", json.valueType()));
		}
	}
	def deString(json: JsonValue) -> Result<string, string> {
		match (json) {
			String(v) => return Result.Ok(v);
			_ => return Result.Err(Strings.format1("Expected to find String, found %s", json.valueType()));
		}
	}
	def deObjectImpl<T>(
		propertyAndTransformer: (string, JsonValue -> Result<T, string>),
		json: JsonValue
	) -> Result<T, string> {
		def prop = propertyAndTransformer.0;
		def transformer = propertyAndTransformer.1;
		match (json) {
			Object(object) => {
				if (object.has(prop)) {
					match (transformer(object[prop])) {
						Ok(result) => {
							return Result.Ok(result);
						}
						Err(err) => return Result.Err(err);
					}
				}
				return Result.Err("no such key in object");
			}
			_ => return Result.Err(Strings.format1("Expected to find Object, found %s", json.valueType()));
		}
	}
	def deObject1Impl<T, A, B>(
		fn: (A) -> T,
		a: (string, JsonValue -> Result<A, string>),
		json: JsonValue
	) -> Result<T, string> {
		match (json) {
			Object(object) => {
				match (deObjectImpl(a, json)) {
					Ok(resultA) => return Result.Ok(fn(resultA));
					Err(err) => return Result.Err(err);
				}
			}
			_ => return Result.Err("Expected to find Object");
		}
	}
	def deObject2Impl<T, A, B>(
		fn: (A, B) -> T,
		a: (string, JsonValue -> Result<A, string>),
		b: (string, JsonValue -> Result<B, string>),
		json: JsonValue
	) -> Result<T, string> {
		match (json) {
			Object(object) => {
				match (deObjectImpl(a, json)) {
					Ok(resultA) => {
						match (deObjectImpl(b, json)) {
							Ok(resultB) => return Result.Ok(fn(resultA, resultB));
							Err(err) => return Result.Err(err);
						}
					}
					Err(err) => return Result.Err(err);
				}
			}
			_ => return Result.Err("Expected to find Object");
		}
	}
	def deObject3Impl<T, A, B, C>(
		fn: (A, B, C) -> T,
		a: (string, JsonValue -> Result<A, string>),
		b: (string, JsonValue -> Result<B, string>),
		c: (string, JsonValue -> Result<C, string>),
		json: JsonValue
	) -> Result<T, string> {
		match (json) {
			Object(object) => {
				match (deObjectImpl(a, json)) {
					Ok(resultA) => {
						match (deObjectImpl(b, json)) {
							Ok(resultB) => {
								match (deObjectImpl(c, json)) {
									Ok(resultC) => return Result.Ok(fn(resultA, resultB, resultC));
									Err(err) => return Result.Err(err);
								}
							}
							Err(err) => return Result.Err(err);
						}
					}
					Err(err) => return Result.Err(err);
				}
			}
			_ => return Result.Err("Expected to find Object");
		}
	}
	def identify<T>(value: T) -> T {
		return value;
	}
	def deArrayImpl<T>(
		transformer: JsonValue -> Result<T, string>,
		json: JsonValue
	) -> Result<Array<T>, string> {
		match (json) {
			Array(array) => {
				def results = Array<T>.new(array.length);
				for (i < array.length) {
					match (transformer(array[i])) {
						Ok(result) => results[i] = result;
						Err(err) => return Result.Err(err);
					}
				}
				return Result.Ok(results);
			}
			_ => return Result.Err("Expected to find Array");
		}
	}
	def deArray<T>(
		transformer: JsonValue -> Result<T, string>
	) -> JsonValue -> Result<Array<T>, string> {
		return deArrayImpl(transformer, _);
	}
	def deObject1<T, A>(
		fn: (A) -> T,
		a: (string, JsonValue -> Result<A, string>)
	) -> JsonValue -> Result<T, string> {
		return deObject1Impl(fn, a, _);
	}
	def deObject2<T, A, B>(
		fn: (A, B) -> T,
		a: (string, JsonValue -> Result<A, string>),
		b: (string, JsonValue -> Result<B, string>)
	) -> JsonValue -> Result<T, string> {
		return deObject2Impl(fn, a, b, _);
	}
	def deObject3<T, A, B, C>(
		fn: (A, B, C) -> T,
		a: (string, JsonValue -> Result<A, string>),
		b: (string, JsonValue -> Result<B, string>),
		c: (string, JsonValue -> Result<C, string>)
	) -> JsonValue -> Result<T, string> {
		return deObject3Impl(fn, a, b, c, _);
	}
	private def hexParser = PC.choice([
		PC.charInRange(48, 57),
		PC.charInRange(65, 70),
		PC.charInRange(97, 102)
	]);
	private def characterParser(state: ParserState) -> ParserState {
		match (state) {
			Result(target, index, result_) => {
				if (target.length - index <= 0) {
					return PCUtils.parserError(
						state,
						Strings.format1("got unexpected end of input at index %d", index)
					);
				}
				def character = target[index];
				if (character == '\"') {
					return PCUtils.parserError(state, "got unexpected \"");
				}
				if (character == '\\') {
					if (target.length - index + 1 <= 0) {
						return PCUtils.parserError(
							state,
							Strings.format1("got unexpected end of input at index %d", index)
						);
					}
					def second = target[index + 1];
					if (
						second == '\"' ||
						second == '\\' ||
						second == '/' ||
						second == 'b' ||
						second == 'f' ||
						second == 'n' ||
						second == 'r' ||
						second == 't') {
							return PCUtils.parserState(state, index + 2, ParseResult.Single([character, second]));
						} else if (second == 'u') {
							def results = Array<ParseResult>.new(5);
							results[0] = ParseResult.Single([character, second]);
							var nextState = PCUtils.parserState(state, index + 1, results[0]);
							for (i < 4) {
								nextState = hexParser.parser(nextState);
								match (nextState) {
									Result(target_, index_, result) => {
										results[i + 1] = result;
									}
									Error => return nextState;
								}
							}
							return PCUtils.parserState(nextState, index, ParseResult.Many(results));
						}
				}
				return PCUtils.parserState(state, index + 1, ParseResult.Single([character]));
			}
			Error => return state;
		}
	}

	// The `parser` should flatten state.result via `PCUtils.flattenParseResultToString`
	// before returning `state`.
	private def unicodeParserImpl(parser: Parser, priorState: ParserState) -> ParserState {
		def state = parser.parser(priorState);
		match (state) {
			Result(target, index, result) => {
				match (result) {
					Single(resultString) => {
						//System.puts(resultString);
						def errorOffset = Utf8.findError(resultString);
						if (errorOffset < 0) {
							return state;
						}
						return PCUtils.parserError(
							state,
							Strings.format1("invalid unicode codepoint in string at index %d", index + errorOffset)
						);
					}
					_ => {
						return state;
					}
				}
			}
			Error => return state;
		}
	}

	private def unicodeParser(parser: Parser) -> Parser {
		return Parser.new(unicodeParserImpl(parser, _));
	}

	def whitespaceParser = PC.optional(
		PC.many(PC.choice([
			PC.str(" "),
			PC.str("\r"),
			PC.str("\n"),
			PC.str("\t")
		]))
	).map(PCUtils.throwawayParseResult);

	def nullParser = PC.str("null");
	def boolParser = PC.choice([PC.str("true"), PC.str("false")]);
	def stringParser = PC.sequenceOf([
		PC.str("\""),
		unicodeParser(
			PC.many(Parser.new(characterParser))
				.map(PCUtils.flattenParseResultToString)
			),
		PC.str("\"")
	]).map(PCUtils.flattenParseResultToString);
	def numberParser = PC.sequenceOf([
		PC.optional(PC.str("-")),
		PC.choice([
			// If the first digit is 0, then there
			// should be no further digits before the decimal.
			PC.str("0"),
			PC.digits
		]),
		PC.optional(
			PC.sequenceOf([
				PC.str("."),
				PC.digits
			])
		),
		PC.optional(
			PC.sequenceOf([
				PC.choice([PC.str("e"), PC.str("E")]),
				PC.choice([PC.str("+"), PC.str("-")]),
				PC.digits
			])
		)
	]).map(PCUtils.flattenParseResultToString);

	def getObjectParser() -> Parser {
		return objectParser;
	}
	def getArrayParser() -> Parser {
		return arrayParser;
	}

	def valueParser = PC.between(
		whitespaceParser,
		PC.choice([
			stringParser,
			numberParser,
			boolParser,
			nullParser,
			PC.lazy(getObjectParser),
			PC.lazy(getArrayParser)
		]),
		whitespaceParser
	).map(PCUtils.removeEmptyParseResults);

	def objectParser = PC.sequenceOf([
		PC.str("{"),
		PC.choice([
			PC.sepBy1(
				PC.str(","),
				PC.sequenceOf([
					whitespaceParser,
					stringParser,
					whitespaceParser,
					PC.str(":").map(PCUtils.throwawayParseResult),
					valueParser
				]).map(PCUtils.removeEmptyParseResults)
			).map(PCUtils.flattenParseResultsOnce),
			whitespaceParser
		]),
		PC.str("}")
	]).map(PCUtils.flattenParseResultsOnce);

	def arrayParser = PC.sequenceOf([
		PC.str("["),
		PC.choice([
			PC.sepBy1(PC.str(","), valueParser),
			whitespaceParser
		]),
		PC.str("]")
	]).map(PCUtils.flattenParseResultsOnce);

	def parseResultArrayToJsonValue(results: Array<ParseResult>) -> JsonValue {
		match (results[0]) {
			Single(bracket) => {
				if (Strings.equal(bracket, "[")) {
					def arrayItems = PCUtils.arraySlice(results, 1, results.length - 1);
					return JsonValue.Array(Arrays.map(arrayItems, parseValueResultToJsonValue));
				} else {
					def num = (results.length - 2) / 2;
					def keys = Array<string>.new(num);
					def values = Array<JsonValue>.new(num);
					for (i < num) {
						match (results[i * 2 + 1]) {
							Single(key) => {
								keys[i] = PCUtils.arraySlice(key, 1, key.length - 1);
							}
							_ => {
								System.puts("parseResultArrayToJsonValue: should never reach here - key must be a single value\n");
							}
						}
						values[i] = parseValueResultToJsonValue(results[i * 2 + 2]);
					}
					def map = Strings.newMap<JsonValue>();
					for (i < num) {
						map[keys[i]] = values[i];
					}
					return JsonValue.Object(map);
				}
			}
			_ => {
				System.puts("parseResultArrayToJsonValue: should never reach here - opening brace must be a Single value\n");
				return JsonValue.Null;
			}
		}
	}

	def parseValueResultToJsonValue(result: ParseResult) -> JsonValue {
		match(result) {
			Single(value) => {
				def firstChar = value[0];
				if (firstChar == '\"') {
					return JsonValue.String(PCUtils.arraySlice(value, 1, value.length - 1));
				} else if (firstChar == 't') {
					return JsonValue.Bool(true);
				} else if (firstChar == 'f') {
					return JsonValue.Bool(false);
				} else if (firstChar == 'n') {
					return JsonValue.Null;
				} else {
					return JsonValue.Number(value);
				}
			}
			Many(results) => return parseResultArrayToJsonValue(results);
			Empty => {
				System.puts("parseValueResultToJsonValue: should never reach here\n");
				return JsonValue.Null;
			}
		}
	}
}
